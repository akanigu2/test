-- Improved Type Soul GUI: Fixed slider dragging, larger slider, cleaner UI

local Players            = game:GetService("Players")
local RunService         = game:GetService("RunService")
local UserInputService   = game:GetService("UserInputService")

local localPlayer        = Players.LocalPlayer
local camera             = workspace.CurrentCamera
local drawingObjects     = {}

local normalWalkSpeed    = 16
local normalRunSpeed     = 24
local maxSpeedMultiplier = 5
local currentMultiplier  = 1
local floatPart          = nil

local espEnabled         = true
local noclipEnabled      = false

local draggingSlider     = false

local function getChar()
    return localPlayer.Character or localPlayer.CharacterAdded:Wait()
end

-- Create main GUI
local gui = Instance.new("ScreenGui", game.CoreGui)
gui.Name = "TypeSoulHub"
gui.ResetOnSpawn = false
gui.Enabled = true

-- Main window frame
local mainFrame = Instance.new("Frame", gui)
mainFrame.Size = UDim2.new(0, 350, 0, 380)
mainFrame.Position = UDim2.new(0, 100, 0, 100)
mainFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true
mainFrame.Name = "MainFrame"

-- Title bar
local titleBar = Instance.new("Frame", mainFrame)
titleBar.Size = UDim2.new(1, 0, 0, 36)
titleBar.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
titleBar.BorderSizePixel = 0

local titleLabel = Instance.new("TextLabel", titleBar)
titleLabel.Size = UDim2.new(1, -45, 1, 0)
titleLabel.Position = UDim2.new(0, 15, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Text = "Type Soul Hub"
titleLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 20
titleLabel.TextStrokeTransparency = 0.75

local closeButton = Instance.new("TextButton", titleBar)
closeButton.Size = UDim2.new(0, 36, 0, 36)
closeButton.Position = UDim2.new(1, -36, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(65, 0, 0)
closeButton.Text = "âœ•"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 22
closeButton.BorderSizePixel = 0
closeButton.MouseButton1Click:Connect(function()
    gui.Enabled = false
end)

-- Tabs container
local tabsFrame = Instance.new("Frame", mainFrame)
tabsFrame.Size = UDim2.new(1, 0, 0, 36)
tabsFrame.Position = UDim2.new(0, 0, 0, 36)
tabsFrame.BackgroundColor3 = Color3.fromRGB(22, 22, 22)
tabsFrame.BorderSizePixel = 0

local pages = {}

local function createTab(name, positionX)
    local tabBtn = Instance.new("TextButton", tabsFrame)
    tabBtn.Size = UDim2.new(0, 120, 1, 0)
    tabBtn.Position = UDim2.new(0, positionX, 0, 0)
    tabBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    tabBtn.BorderSizePixel = 0
    tabBtn.Text = name
    tabBtn.TextColor3 = Color3.fromRGB(210, 210, 210)
    tabBtn.Font = Enum.Font.GothamBold
    tabBtn.TextSize = 16
    tabBtn.AutoButtonColor = false

    local page = Instance.new("Frame", mainFrame)
    page.Size = UDim2.new(1, 0, 1, -72)
    page.Position = UDim2.new(0, 0, 0, 72)
    page.BackgroundColor3 = Color3.fromRGB(24, 24, 24)
    page.BorderSizePixel = 0
    page.Visible = false

    pages[name] = {button = tabBtn, page = page}

    tabBtn.MouseButton1Click:Connect(function()
        for _, v in pairs(pages) do
            v.page.Visible = false
            v.button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            v.button.TextColor3 = Color3.fromRGB(210, 210, 210)
        end
        page.Visible = true
        tabBtn.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
        tabBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)

    return page
end

-- Create tabs
local espPage = createTab("ESP", 0)
local miscPage = createTab("Misc", 120)

-- Activate first tab by default
pages["ESP"].page.Visible = true
pages["ESP"].button.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
pages["ESP"].button.TextColor3 = Color3.fromRGB(255, 255, 255)

-- ========== ESP PAGE ==========

local espToggle = Instance.new("TextButton", espPage)
espToggle.Size = UDim2.new(0, 140, 0, 44)
espToggle.Position = UDim2.new(0, 20, 0, 20)
espToggle.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
espToggle.TextColor3 = Color3.fromRGB(230, 230, 230)
espToggle.BorderSizePixel = 0
espToggle.Font = Enum.Font.GothamBold
espToggle.TextSize = 18
espToggle.Text = "ESP: ON"

espToggle.MouseButton1Click:Connect(function()
    espEnabled = not espEnabled
    espToggle.Text = espEnabled and "ESP: ON" or "ESP: OFF"
    for _, obj in pairs(drawingObjects) do
        for _, draw in pairs(obj) do
            draw.Visible = false
        end
    end
end)

-- ========== MISC PAGE ==========

local noclipToggle = Instance.new("TextButton", miscPage)
noclipToggle.Size = UDim2.new(0, 140, 0, 44)
noclipToggle.Position = UDim2.new(0, 20, 0, 20)
noclipToggle.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
noclipToggle.TextColor3 = Color3.fromRGB(230, 230, 230)
noclipToggle.BorderSizePixel = 0
noclipToggle.Font = Enum.Font.GothamBold
noclipToggle.TextSize = 18
noclipToggle.Text = "NoClip: OFF"

noclipToggle.MouseButton1Click:Connect(function()
    noclipEnabled = not noclipEnabled
    noclipToggle.Text = noclipEnabled and "NoClip: ON" or "NoClip: OFF"

    if noclipEnabled then
        if not floatPart then
            floatPart = Instance.new("Part")
            floatPart.Size = Vector3.new(6, 1, 6)
            floatPart.Anchored = true
            floatPart.Transparency = 1
            floatPart.CanCollide = true
            floatPart.Parent = workspace
        end
    else
        if floatPart then
            floatPart:Destroy()
            floatPart = nil
        end
    end
end)

local speedLabel = Instance.new("TextLabel", miscPage)
speedLabel.Size = UDim2.new(1, -40, 0, 30)
speedLabel.Position = UDim2.new(0, 20, 0, 85)
speedLabel.BackgroundTransparency = 1
speedLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
speedLabel.Font = Enum.Font.Gotham
speedLabel.TextSize = 18
speedLabel.Text = "WalkSpeed: 1.0x"

local sliderBar = Instance.new("Frame", miscPage)
sliderBar.Size = UDim2.new(1, -40, 0, 20)
sliderBar.Position = UDim2.new(0, 20, 0, 120)
sliderBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
sliderBar.BorderSizePixel = 0
sliderBar.Name = "SliderBar"

local sliderKnob = Instance.new("Frame", sliderBar)
sliderKnob.Size = UDim2.new(0, 24, 1, 0)
sliderKnob.Position = UDim2.new(0, 0, 0, 0)
sliderKnob.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
sliderKnob.BorderSizePixel = 0
sliderKnob.AnchorPoint = Vector2.new(0.5, 0.5)
sliderKnob.Position = UDim2.new(0, 0, 0.5, 0)
sliderKnob.ZIndex = 2
sliderKnob.Name = "SliderKnob"
sliderKnob.AutoButtonColor = false

-- Fix dragging: prevent mainFrame drag while dragging slider knob
local draggingMainFrame = false
local dragInput, dragStart, startPos

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingMainFrame = true
        dragStart = input.Position
        startPos = mainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                draggingMainFrame = false
            end
        end)
    end
end)
titleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if draggingMainFrame and input == dragInput and not draggingSlider then
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- Slider dragging logic
sliderKnob.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = true
    end
end)
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        draggingSlider = false
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if draggingSlider and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mouseX = input.Position.X
        local barX = sliderBar.AbsolutePosition.X
        local barW = sliderBar.AbsoluteSize.X
        local relativeX = math.clamp(mouseX - barX, 0, barW)
        sliderKnob.Position = UDim2.new(0, relativeX, 0.5, 0)
        local pct = relativeX / barW
        currentMultiplier = 1 + (maxSpeedMultiplier - 1) * pct
        speedLabel.Text = ("WalkSpeed: %.1fx"):format(currentMultiplier)
    end
end)

-- GUI toggle (Right Ctrl)
UserInputService.InputBegan:Connect(function(input, gpe)
    if input.KeyCode == Enum.KeyCode.RightControl and not gpe then
        gui.Enabled = not gui.Enabled
    end
end)

-- Persistent WalkSpeed + NoClip enforcement with running speed preserved
RunService.Stepped:Connect(function()
    local char = getChar()
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if hum then
        if hum.WalkSpeed >= normalRunSpeed - 0.1 then
            hum.WalkSpeed = normalRunSpeed
        else
            hum.WalkSpeed = normalWalkSpeed * currentMultiplier
        end
    end

    -- NoClip logic + float part placement
    if noclipEnabled and char then
        for _, part in pairs(char:GetChildren()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end

        if floatPart then
            local root = char:FindFirstChild("HumanoidRootPart")
            if root then
                local pos = root.Position
                floatPart.Position = Vector3.new(pos.X, pos.Y - 3.5, pos.Z)
            end
        end
    end
end)

-- ESP drawing
local function createDrawing(player)
    local name = Drawing.new("Text")
    name.Visible = false
    name.Center = true
    name.Outline = true
    name.OutlineColor = Color3.new(0, 0, 0)
    name.Size = 16
    name.Font = 3 -- System font

    local health = Drawing.new("Text")
    health.Visible = false
    health.Center = true
    health.Outline = true
    health.OutlineColor = Color3.new(0, 0, 0)
    health.Size = 14
    health.Font = 3

    local dist = Drawing.new("Text")
    dist.Visible = false
    dist.Center = true
    dist.Outline = true
    dist.OutlineColor = Color3.new(0, 0, 0)
    dist.Size = 14
    dist.Font = 3

    drawingObjects[player] = {
        name = name,
        health = health,
        dist = dist
    }
end

Players.PlayerAdded:Connect(function(player)
    createDrawing(player)
end)
for _, player in pairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createDrawing(player)
    end
end

RunService.RenderStepped:Connect(function()
    if not espEnabled then
        for _, obj in pairs(drawingObjects) do
            for _, d in pairs(obj) do
                d.Visible = false
            end
        end
        return
    end

    local char = getChar()
    if not char then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for player, d in pairs(drawingObjects) do
        local pchar = player.Character
        local hum = pchar and pchar:FindFirstChildOfClass("Humanoid")
        local hrp2 = pchar and pchar:FindFirstChild("HumanoidRootPart")
        if hum and hrp2 and hum.Health > 0 then
            local s, onScreen = camera:WorldToViewportPoint(hrp2.Position)
            if onScreen then
                d.name.Visible = true
                d.health.Visible = true
                d.dist.Visible = true
                d.name.Position = Vector2.new(s.X, s.Y - 40)
                d.health.Position = Vector2.new(s.X, s.Y - 26)
                d.dist.Position = Vector2.new(s.X, s.Y - 14)

                local teamColor = player.TeamColor.Color or Color3.new(1, 1, 1)
                d.name.Color = teamColor
                d.name.Text = player.Name
                d.health.Text = ("HP: %d"):format(math.floor(hum.Health))
                d.dist.Text = ("%.1fm"):format((hrp.Position - hrp2.Position).Magnitude)
            else
                d.name.Visible = false
                d.health.Visible = false
                d.dist.Visible = false
            end
        else
            d.name.Visible = false
            d.health.Visible = false
            d.dist.Visible = false
        end
    end
end)
